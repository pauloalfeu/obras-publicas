import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import seaborn as sns
from wordcloud import WordCloud
import PIL.Image as Image
from collections import Counter
import re

st.set_page_config(page_title="Obras Publicas")
st.markdown("""<div id='section-1'></div>""", unsafe_allow_html=True)


def add_anchor(section_id, section_title):
    st.sidebar.markdown("""
    <style>
    a:hover {
    font-weight: bold;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.sidebar.markdown(f"""
    <a href='#{section_id}' style="color:#20201e; text-decoration: none;">{section_title}</a>
    """, unsafe_allow_html=True)
    
    st.markdown(f"""<div id='{section_id}'></div>""", unsafe_allow_html=True)

def add_section_id(section_id):
    new_section_id = f"section-{section_id}"
    return new_section_id

def add_section_title(section_title):
    new_section_title = f"Nova Se√ß√£o {section_title}"
    return new_section_title

add_anchor("section-1", "In√≠cio")


#st.markdown("### üèóÔ∏è AN√ÅLISE DO ANDAMENTO DE OBRAS P√öBLICAS UTILIZANDO DADOS DE PORTAIS DE TRANSPAR√äNCIA")
st.markdown("<h3 style='color: #20201E; text-align: center;'> üèóÔ∏è AN√ÅLISE DO ANDAMENTO DE OBRAS P√öBLICAS UTILIZANDO DADOS DE PORTAIS DE TRANSPAR√äNCIA</h3>", unsafe_allow_html=True)
add_anchor("section-2", "Conceitos, Tabelas e Gr√°ficos")
add_anchor("section-3", "Tutorial - Portal da Transpar√™ncia")

################################### SE√á√ÉO DE GUIAS

tab1, tab2 = st.tabs(["üè† P√°gina Inicial - Conceitos, Tabelas e Gr√°ficos", "üéØ Tutorial - Obtendo dados no Portal da Transpar√™ncia de Cascavel "])

add_anchor("section-4", "Escolha da base de dados")
with tab1:
    #st.markdown("#### O que caracteriza uma Obra P√∫blica?")
    st.markdown("<h4 style='color: #20201E; text-align: center;'> O que caracteriza uma Obra P√∫blica?</h4>", unsafe_allow_html=True)
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(">**Defini√ß√£o de Obra P√∫blica:**")
        st.markdown("De acordo com o Conselho Nacional do Minist√©rio P√∫blico, obra p√∫blica √© considerada ‚Äútoda constru√ß√£o, reforma, fabrica√ß√£o, recupera√ß√£o ou amplia√ß√£o de bem p√∫blico‚Äù (CNMP, 2017).")
        st.image("https://egob.com/wp-content/uploads/2021/01/egob_obra_publica-1024x671.png", width=220)
        st.markdown("Ressalte-se que a qualidade de uma obra depende do adequado gerenciamento de suas diversas etapas intermedi√°rias e da participa√ß√£o de profissionais capacitados (CNMP, 2017).")
    with col2:
        st.markdown(">**Lei de Acesso √† Informa√ß√£o:**")
        st.markdown(" A Lei de Acesso √† Informa√ß√£o N¬∫ 12.527, foi sancionada em 18 de novembro de 2011. Esta tem como diretriz o princ√≠pio de publicidade m√°xima da administra√ß√£o p√∫blica. ")
        st.image("https://goias.gov.br/educacao/wp-content/uploads/sites/40/2024/03/lei.png", width=400)
        st.markdown("O artigo 3¬∫ da lei prev√™ a utiliza√ß√£o de ferramentas de comunica√ß√£o viabilizadas pela tecnologia da informa√ß√£o. Uma das principais manifesta√ß√µes da utiliza√ß√£o da T.I. na publicidade dos dados p√∫blicos est√° no chamados Portais da Transpar√™ncia.")
    st.divider()
    st.markdown("##### Defini√ß√£o de Portal da Transpar√™ncia:")
    st.markdown(">\"√© um site de acesso livre, no qual o cidad√£o pode encontrar informa√ß√µes sobre como o dinheiro p√∫blico √© utilizado, al√©m de se informar sobre assuntos relacionados √† gest√£o p√∫blica\" (Controladoria Geral da Uni√£o).")
    st.markdown("Dados geralmente disponibilizadas nos portais est√£o relacionados as √°reas de: Licita√ß√µes, Contratos, Compras, Recursos Humanos, Despesas, Receitas, Tributos, etc.")
with tab2:
    st.markdown("#### Portal da Transpar√™ncia de Cascavel ")
    st.markdown("Tutorial: Acessando e Obtendo Dados em Formato .CSV no Portal da Transpar√™ncia de Cascavel")
    st.markdown("Este tutorial tem como objetivo ajudar voc√™ a navegar pelo Portal da Transpar√™ncia do Munic√≠pio de Cascavel e obter os dados de seu interesse em formato .CSV. Esse formato √© ideal para an√°lise na ferramenta que vamos utilizar, permitindo que voc√™ explore os dados de forma mais detalhada.")
    st.markdown("")
    st.markdown("##### Passo a Passo:")
    st.markdown("##### 1. **Acesse o Portal:**")
    st.markdown("* Abra seu navegador de internet (Google Chrome, Mozilla Firefox, etc.) e digite a seguinte URL na barra de endere√ßo: https://cascavel.atende.net/transparencia/")
    st.markdown("##### 2. **Navegue pelo Site:**")
    st.markdown("* Explore as diferentes se√ß√µes do portal. Geralmente, voc√™ encontrar√° menus ou categorias que dividem os dados por temas, encontre a se√ß√£o destinada a \"OBRAS PUBLICAS\".")
    st.markdown("##### 3. **Consultar obras p√∫blicas:**")
    st.markdown("* Voc√™ ser√° redirecionado para uma p√°gina dedicada e ir√° clicar no campo onde consta: \"CONSULTAR OBRAS PUBLICAS\".")
    st.markdown("* Feito isto, voc√™ ir√° clicar no bot√£o: \"PORTAL DA TRANSPAR√äNCIA MUNICIPAL\".")
    st.markdown("##### 4. **Aplique ou remova filtros antes do download:**")
    st.markdown("* A nova guia que ser√° aberta apresentar√° uma ferramenta de pesquisa das obras, e antes de baixar a base de dados, recomendamos que remova o filtro de \"ANO\" clicando no ano que aparecer√° automaticamente e selecionando a op√ß√£o \"S...\".")
    st.markdown("##### 5. **Baixando a base de dados:**")
    st.markdown("* Feita a etapa de remo√ß√£o ou sele√ß√£o de filtros voc√™ estar√° pronto para salvar a base de dados em seu dispositivo, basta clicar na op√ß√£o \"DADOS ABERTOS\", e depois, clicando em \"CONFIRMAR\".")

####################### ESCOLHA DA BASE E APRESENTA√á√ÉO DO MUNICIPIO/CASCAVEL ################

st.divider()
#plot = prettymaps.plot('Regi√£o do Lago, Cascavel, Brasil', radius = False,)
#st.pyplot(plot)
st.markdown("""
<div style='justify-content: center; text-align:center'>
    <h4 style='color: #20201E'> üèôÔ∏è Escolha da base de dados: munic√≠pio de Cascavel/PR.</h4>
</div>
""", unsafe_allow_html=True)
st.markdown("""Localizada na regi√£o Oeste do Paran√°, destaca-se como um importante centro econ√¥mico e cultural da regi√£o Sul do Brasil. Com uma popula√ß√£o significativa e em constante crescimento, a cidade √© conhecida por sua infraestrutura moderna, universidades renomadas e um robusto setor industrial e comercial (IBGE, 2023).""") 
st.markdown("""
<div style='justify-content: center; text-align:center'>
    <figure>
    <img src="https://github.com/pauloalfeu/obras-publicas/blob/main/base/cac_reg_lago.png?raw=true" width="700">
    <figcaption>Regi√£o do Lago, Cascavel - Paran√°, Brasil. (Figura gerada com a biblioteca Prettymap).</figcaption>
  </figure>
</div>
""", unsafe_allow_html=True)
st.markdown("""Segundo dados do IBGE (2023), Cascavel ocupa uma posi√ß√£o de destaque no ranking dos munic√≠pios paranaenses em termos de popula√ß√£o e extens√£o territorial. Sua hist√≥ria, marcada pela coloniza√ß√£o e pelo desenvolvimento agr√≠cola, culminou em uma cidade din√¢mica e promissora, que atrai investimentos e impulsiona o desenvolvimento regional. """)

################################### SE√á√ÉO DE UPLOAD DE DATAFRAME

st.divider()
add_anchor("section-5", "Carregue a base de dados")
st.markdown("#### Carregue a base de dados para gerar as tabelas e gr√°ficos:")
st.markdown("Busque um arquivo **_.csv_** clicando em **\"_Browse files_\"** no campo abaixo:")
st.warning(":bulb: **Importante:** siga as etapas apresentadas na guia **\"_Tutorial - Obtendo dados no Portal da Transpar√™ncia de Cascavel_\"** para fazer o download do arquivo correto.")
uploaded_file = st.file_uploader("", help="Arraste e solte seu arquivo aqui")
if uploaded_file is not None:
    # Recebendo arquivo.csv:
    dataframe = pd.read_csv(uploaded_file, sep=';', encoding='latin1')
    Obras_CAC = dataframe
    st.info("Base de dados carregada com sucesso!")



########################## TRATAMENTO DO ARQUIVO P/ DATAFRAME ##############################

    # Convertendo a coluna 'Data de In√≠cio' para datetime
    Obras_CAC[['Data de Cadastro', 'Data de In√≠cio', 'Previs√£o Conclus√£o']] = Obras_CAC[['Data de Cadastro', 'Data de In√≠cio', 'Previs√£o Conclus√£o']].apply(pd.to_datetime, dayfirst=True)

    #Criando uma nova coluna com o ano
    Obras_CAC['Ano'] = Obras_CAC['Data de In√≠cio'].dt.year

    # Criando uma nova coluna com tempo da obra em dias
    Obras_CAC['Tempo Obra (Dias)'] = (Obras_CAC['Previs√£o Conclus√£o'] - Obras_CAC['Data de In√≠cio']).dt.days

    #Renovendo colunas
    Obras_CAC = Obras_CAC.drop('Entidade', axis=1)
    Obras_CAC = Obras_CAC.drop('N√∫mero/Ano Interven√ß√£o', axis=1)

    # Filter de Obras em Adamento por ano
    Andamento = Obras_CAC[Obras_CAC['Situa√ß√£o'] == 'Em Andamento']
    # Agrupamento por ano + count
    And_per_year = Andamento.groupby('Ano')['N√∫mero/Ano Obra'].count()
    Andamento_per_year = And_per_year.reset_index()
    # Renomeando as colunas
    Andamento_per_year.columns = ['Ano', 'Qtd']
    Obras_CAC = Obras_CAC.drop('N√∫mero/Ano Obra', axis=1)

    # Convertendo os valores da coluna 'Valor Total'
    def limpar_e_converter(valor):
        valor_str = str(valor)
        valor_str = valor_str.rstrip('.')  # Remove pontos no final
        # Substitui a v√≠rgula por ponto
        valor_str = valor_str.replace(',', '.')
        # Remove todos os pontos, exceto o √∫ltimo
        valor_str = valor_str.replace('.', '', valor_str.count('.') - 1)
        # Remove espa√ßos em branco
        valor_str = valor_str.strip()
        try:
            return float(valor_str)
        except ValueError:
            print(f"Erro ao converter {valor} para float.")
            return np.nan

    Obras_CAC['Valor Total'] = Obras_CAC['Valor Total'].apply(limpar_e_converter)




    ################## APRESENTANDO O DATAFRAME // FILTROS DO USUARIO ##################
    
    #Criando nova ancora
    
    add_anchor("section-6", "Aplicando filtros")
    st.divider()
    st.markdown("#### üîé Aplicando filtros:")
    st.markdown("Agora que a base de dados foi carregada, voc√™ ser√° capaz de filtrar o conte√∫do para encontrar dados espec√≠ficos que podem auxiliar na obten√ß√£o de novas informa√ß√µes.")
    st.markdown("> √â poss√≠vel selecionar um ou mais anos de cadastro de obra, sua situa√ß√£o e o percentual de conclus√£o (para este √∫ltimo, basta arrastar as extermidades da barra para atingir a porcentagem desejada.)")
    years_sorted = Obras_CAC["Ano"].unique()
    years_sorted= pd.DataFrame(years_sorted)
    years_sorted = years_sorted.sort_values(by=0, ascending=False)
    
    anos = st.multiselect("**Escolha o ano:**", years_sorted)
    situacao = st.multiselect("**Escolha a situa√ß√£o da obra:**", Obras_CAC["Situa√ß√£o"].unique())
    menor_p = Obras_CAC['Percentual Conclus√£o (%)'].min()
    maior_p = Obras_CAC['Percentual Conclus√£o (%)'].max()
    percent = st.slider("**Percentual de conclus√£o (%):**", menor_p, maior_p, (menor_p, maior_p))

   #Utilizando st.empty(), preenche o espa√ßo com o widget quando necess√°rio.
    placeholder = st.empty()
    
    if anos:
        placeholder.empty()
        select = Obras_CAC[Obras_CAC['Ano'].isin(anos)]
        placeholder.data_editor(select)
        
    if situacao:
        placeholder.empty()
        sit = Obras_CAC[Obras_CAC['Situa√ß√£o'].isin(situacao)]
        placeholder.data_editor(sit)
    
    if percent:
        placeholder.empty()
        pct = Obras_CAC[(Obras_CAC['Percentual Conclus√£o (%)']>= percent[0]) & (Obras_CAC['Percentual Conclus√£o (%)']<=percent[1])]
        placeholder.data_editor(pct)
    
    if anos and situacao:
        placeholder.empty()
        and_sit = select[select['Situa√ß√£o'].isin(situacao)]
        placeholder.data_editor(and_sit, key='and_sit')
    
    if anos and percent:
        placeholder.empty()
        and_pct = select[(select['Percentual Conclus√£o (%)']>= percent[0]) & (select['Percentual Conclus√£o (%)']<=percent[1])]
        placeholder.data_editor(and_pct, key='and_pct')
    
    if situacao and percent:
        placeholder.empty()
        sit_pct = sit[(sit['Percentual Conclus√£o (%)']>= percent[0]) & (sit['Percentual Conclus√£o (%)']<=percent[1])]
        placeholder.data_editor(sit_pct, key='sit_pct')
        
    if anos and situacao and percent:
        placeholder.empty()
        sit_and_pct = and_sit[(and_sit['Percentual Conclus√£o (%)']>= percent[0]) & (and_sit['Percentual Conclus√£o (%)']<=percent[1])]
        placeholder.data_editor(sit_and_pct, key='sit_and_pct')

    ######################################################
    ###################### GR√ÅFICOS ######################
    ######################################################

    add_anchor("section-7", "Gr√°ficos de Obras N√£o Finalizadas")
    st.markdown("#### Total de obras conclu√≠das com menos de 100% por ano")
    tab3, tab4 = st.tabs(["Obras conclu√≠das com menos de 100% por ano", "Obras em Adamento por Ano"])

    with tab3:
        #Andamento_per_year
        # Gr√°fico Total de obras conclu√≠das com menos de 100% por ano
        sns.barplot(x='Ano', hue='Ano', y= 'Qtd', data=Not100_by_year, palette='Set2', legend=False, gap=0.1, width=0.8)
        plt.title('Quantidade de obras conclu√≠das com % abaixo de 100')
        plt.xlabel('Ano/Gest√£o')
        plt.yticks(range(0, 7, 1)) #de zero a vinte, a cada dois ticks
        plt.ylabel('Total de Obras conclu√≠das com menos de 100% por ano')
        plt.show()

    with tab4:
        #Quantidade de obras conclu√≠das com % abaixo de 100

        obrs_not100 = Obras_CAC[Obras_CAC['Percentual Conclus√£o (%)'] != 100.00]
        conc_not100 = obrs_not100.loc[obrs_not100['Situa√ß√£o'] == 'Conclu√≠da']

        # Agrupamento por ano + count
        Not100_per_year = conc_not100.groupby('Ano')['N√∫mero/Ano Obra'].count()
        Not100_by_year = Not100_per_year.reset_index()
        Not100_by_year.columns = ['Ano', 'Qtd'] # Renomeando as colunas

        #conc_not100.sort_values(by=['Ano'], ascending=True)
        Not100_by_year.sort_values(by=['Ano'], ascending=True)
        #Total de obras por gest√£o
        sns.barplot(x='Ano', hue='Ano', y= 'Qtd', data=Andamento_per_year, palette='Set2', legend=False, gap=0.1, width=0.8)
        plt.title('Quantidade de Obras em Adamento por Ano')
        plt.xlabel('Ano/Gest√£o')
        plt.yticks(range(0, 21, 2)) #de zero a vinte, a cada dois ticks
        plt.ylabel('Total de Obras em Adamento')
        plt.show()

    
    ######################################################
    ################ NUVEM DE PALAVRAS ###################
    ######################################################

    #from collections import Counter
    #import re

    # Fun√ß√£o para pr√©-processar o texto
    def preprocessar_texto(texto):
        texto = texto.lower()
        texto = re.sub(r'[^\w\s]', '', texto)
        palavras = texto.split()
        return palavras


    # Aplicar o pr√©-processamento em toda a coluna
    OBRS_Desc = pd.DataFrame()
    OBRS_Desc['Descri√ß√£o']= Obras_CAC['Descri√ß√£o'].apply(preprocessar_texto)

    # Contar a frequ√™ncia das palavras
    todas_as_palavras = [palavra for lista in OBRS_Desc['Descri√ß√£o'] for palavra in lista if len(palavra) >= 4]
    contagem_palavras = Counter(todas_as_palavras)

    #Criar um dataframe para receber as palavras-chave
    OBRAS_KeyWords = pd.DataFrame(columns=['Palavra', 'Contagem'])

    # Obter as palavras mais comuns - resultado geral
    i=0
    palavras_mais_frequentes = contagem_palavras.most_common()
    for palavra, contagem in palavras_mais_frequentes:
        if contagem >= 5:
            OBRAS_KeyWords.at[i, 'Palavra'] = palavra
            OBRAS_KeyWords.at[i, 'Contagem'] = contagem
            i += 1

    st.divider()
    
    add_anchor("section-8", "Nuvem de Palavras")
    st.markdown("#### Nuvem de Palavras-Chave: Descri√ß√µes das Obras P√∫blicas")
    tab5, tab6 = st.tabs(["Nuvem de palavras", "Base de dados"])
    
    with tab5:
        word_freq = dict(zip(OBRAS_KeyWords['Palavra'], OBRAS_KeyWords['Contagem']))
        #word_freq
        word_freq.pop('lote') #126
        word_freq.pop('municipal') #108
        word_freq.pop('p√∫blica') #64
        word_freq.pop('92021') #22
        word_freq.pop('72019') #15
        word_freq.pop('12020') # 13
        word_freq.pop('102020') # 12
        
        python_mask = np.array(Image.open('./base/CAC_logo.png')) 
        #para arquivos locais mudar o final do trecho de c√≥digo acima
        wordcloud = WordCloud(width=900, height=400, background_color='#f2f3f5', colormap='Set2', mask= python_mask, contour_color="gray", contour_width=1, min_font_size=3).generate_from_frequencies(word_freq)

        # Define a cor da borda (por exemplo, preto)
        border_color = '#f2f3f5'
        # Adicionando t√≠tulo
        plt.figure(figsize=(10, 7), facecolor=border_color)  # Define a cor de fundo (borda)
        plt.imshow(wordcloud, interpolation='bilinear')
        plt.max_font_size = 150
        plt.axis('off')
        st.pyplot(plt)
        st.markdown("A imagem acima representa uma visualiza√ß√£o das palavras mais frequentes encontradas nas descri√ß√µes das obras p√∫blicas. Ap√≥s um processo de limpeza e contagem, as palavras mais comuns, como ""lote"", ""municipal"" e ""p√∫blica"", foram removidas para destacar os termos mais relevantes e espec√≠ficos. Essa nuvem de palavras oferece uma vis√£o geral dos temas e caracter√≠sticas mais comuns presentes nas obras analisadas.")

    with tab6:
        st.data_editor(OBRAS_KeyWords)

st.divider()